service: linsta-api

provider:
  name: aws
  runtime: nodejs22.x
  region: us-west-2
  apiGateway:
    binaryMediaTypes:
      - image/jpeg
      - image/png
      - multipart/form-data
      - application/octet-stream  
  vpc:
    securityGroupIds:
      - sg-0c35adbcbdcc26c2a # Redis security group
    subnetIds:
      - subnet-02f925bef5ee3850f # Private subnet 1
      - subnet-010162509dc3b1723 # Private subnet 2
  environment:
    GRAPH_ENDPOINT: db.linsta.lboydstun.com
    REDIS_ENDPOINT: redis.linsta.lboydstun.com
    ELASTICSEARCH_ENDPOINT: https://search.linsta.lboydstun.com:9200
    MONITORING_ENDPOINT: monitoring.linsta.lboydstun.com
    NODE_ENV: 'production'
  iamRoleStatements:
    # S3 access â€“ limited to a specific bucket
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:DeleteObject
        - s3:GetObject
      Resource: arn:aws:s3:::linsta-public/*  
    - Effect: Allow
      Action:
        - ses:SendEmail
        - sns:Publish
        - ses:SendTemplatedEmail
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - geo:SearchPlaceIndexForText
        - geo:SearchPlaceIndexForPosition
        - geo:SearchPlaceIndexForSuggestions
        - geo:GetPlace
      Resource: arn:aws:geo:us-west-2:847903130022:place-index/LinstaPlaceIndex      

package:
  include:
    - build/certs/ca.crt
  patterns:
    - '!node_modules/mock-aws-s3/**'
    - '!**/*.html'

plugins:
  - serverless-offline
  - serverless-jest-plugin
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 2 # Keeps only the last 3 versions
  jest:
    collectCove
  serverless-offline:
    watch:
      ignore:
        - '**/*.ts'          
        - 'node_modules/**'   
        - '.serverless/**'
        - 'dist/**'         
        - 'app/**'
        - 'build/**'
        - 'coverage/**'
        - 'logs/**'
    httpPort: 3001
    noPrependStageInUrl: true

functions:
  cronProcessor:
    handler: build/metrics/metricsCron.handler
    events:
      - schedule:
          rate: cron(* * * * ? *)  # every minute
          enabled: true
          name: ipTrackingCronRule
          description: "Trigger Lambda every minute to report unique IPs"    
  accountsCheck:
    handler: build/controllers/accounts/checkUserName.handler
    events:
      - http:
          path: /api/v1/accounts/check/{userName}
          method: get
          cors: true  # Enable CORS for cross-origin requests
  accountsAttempt:
    handler: build/controllers/accounts/accountsAttempt.handler
    events:
      - http:
          path: /api/v1/accounts/attempt
          method: post
          cors: true  # Enable CORS for cross-origin requests
  accountsSendConfirmCode:
    handler: build/controllers/accounts/sendConfirmCode.handler
    timeout: 12
    events:
      - http:
          path: /api/v1/accounts/sendConfirmCode
          method: get
          cors:
            origin: 'https://www.lboydstun.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  accountsForgotPassword:
    handler: build/controllers/accounts/forgotPassword.handler
    events:
      - http:
          path: /api/v1/accounts/forgot
          method: post
          cors: true  # Enable CORS for cross-origin requests
  accountsChangePassword:
    handler: build/controllers/accounts/changePassword.handler
    events:
      - http:
          path: /api/v1/accounts/changePassword
          method: post
          cors: true  # Enable CORS for cross-origin requests
  accountsToggleFollowing:
    handler: build/controllers/accounts/toggleFollowing.handler
    events:
      - http:
          path: /api/v1/accounts/follow
          method: post
          cors: true  # Enable CORS for cross-origin requests
  accountsLogin:
    handler: build/controllers/accounts/loginUser.handler
    events:
      - http:
          path: /api/v1/accounts/login
          method: post    
          cors: true  # Enable CORS for cross-origin requests      
  getLocation:
    handler: build/controllers/locations/getLocation.handler
    events:
      - http:
          path: /api/v1/locations/get
          method: get
          cors: true  # Enable CORS for cross-origin requests
  addPost:
    handler: build/controllers/posts/addPost.handler
    events:
      - http:
          path: /api/v1/posts/addPost
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/posts/addPost
          method: put       
          cors: true  # Enable CORS for cross-origin requests   
  deletePost:
    handler: build/controllers/posts/deletePost.handler
    events:
      - http:
          path: /api/v1/posts/deletePost
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/posts/deletePost
          method: delete
          cors: true  # Enable CORS for cross-origin requests
  updatePost:
    handler: build/controllers/posts/updatePost.handler
    events:
      - http:
          path: /api/v1/posts/updatePost
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/posts/updatePost
          method: patch
          cors: true  # Enable CORS for cross-origin requests
  getAllPostsByFollowing:
    handler: build/controllers/posts/getAllPostsByFollowing.handler
    events:
      - http:
          path: /api/v1/posts/getAllPostsByFollowing
          method: post
          cors: true  # Enable CORS for cross-origin requests
  postGetPostById:
    handler: build/controllers/posts/postGetPostById.handler
    events:
      - http:
          path: /api/v1/posts/getPostById
          method: post
          cors: true  # Enable CORS for cross-origin requests
  toggleLikePost:
    handler: build/controllers/posts/toggleLikePost.handler
    events:
      - http:
          path: /api/v1/posts/likePost
          method: post
          cors: true  # Enable CORS for cross-origin requests
  postIsPostLikedByUserId:
    handler: build/controllers/posts/postIsPostLikedByUserId.handler
    events:
      - http:
          path: /api/v1/posts/isPostLikedByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getAllLikesByPost:
    handler: build/controllers/posts/getAllLikesByPost.handler
    events:
      - http:
          path: /api/v1/posts/getAllLikesByPost
          method: get
          cors: true  # Enable CORS for cross-origin requests
  getPostsByUserId:
    handler: build/controllers/posts/getPostsByUserId.handler
    events:
      - http:
          path: /api/v1/posts/getByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  addComment:
    handler: build/controllers/comments/addComment.handler
    events:
      - http:
          path: /api/v1/comment/add
          method: post
          cors: true  # Enable CORS for cross-origin requests
  deleteComment:
    handler: build/controllers/comments/deleteComment.handler
    events:
      - http:
          path: /api/v1/comment/delete
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/comment/delete
          method: delete
          cors: true  # Enable CORS for cross-origin requests
  getCommentsByPostId:
    handler: build/controllers/comments/getCommentsByPostId.handler
    events:
      - http:
          path: /api/v1/comment/getByPostId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  toggleCommentLike:
    handler: build/controllers/comments/toggleCommentLike.handler
    events:
      - http:
          path: /api/v1/comment/toggleLike
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getPostSearch:
    handler: build/controllers/search/getPostSearch.handler
    events:
      - http:
          path: /api/v1/search/getPostSearch
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getSuggestions:
    handler: build/controllers/search/getSuggestions.handler
    events:
      - http:
          path: /api/v1/search/getSuggestions
          method: get
          cors: true  # Enable CORS for cross-origin requests
  updateProfileByUserId:
    handler: build/controllers/profiles/updateProfileByUserId.handler
    events:
      - http:
          path: /api/v1/profiles/updateProfileByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/profiles/updateProfileByUserId
          method: patch
          cors: true  # Enable CORS for cross-origin requests
  getPostProfileByUserId:
    handler: build/controllers/profiles/getPostProfileByUserId.handler
    events:
      - http:
          path: /api/v1/profiles/getByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getPostProfileByUserName:
    handler: build/controllers/profiles/getPostProfileByUserName.handler
    events:
      - http:
          path: /api/v1/profiles/getByUserName
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getProfileStatsById:
    handler: build/controllers/profiles/getProfileStatsById.handler
    events:
      - http:
          path: /api/v1/profiles/getStatsById
          method: post
          cors: true  # Enable CORS for cross-origin requests
  putProfilePfp:
    handler: build/controllers/profiles/putProfilePfp.handler
    events:
      - http:
          path: /api/v1/profiles/updatePfp
          method: post
          cors: true  # Enable CORS for cross-origin requests
      - http:
          path: /api/v1/profiles/updatePfp
          method: put  
          cors: true  # Enable CORS for cross-origin requests       
  getFollowingByUserId:
    handler: build/controllers/profiles/getFollowingByUserId.handler
    events:
      - http:
          path: /api/v1/profiles/getFollowingByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getFollowersByUserId:
    handler: build/controllers/profiles/getFollowersByUserId.handler
    events:
      - http:
          path: /api/v1/profiles/getFollowersByUserId
          method: post
          cors: true  # Enable CORS for cross-origin requests
  getSingleFollowStatus:
    handler: build/controllers/profiles/getSingleFollowStatus.handler
    events:
      - http:
          path: /api/v1/profiles/getSingleFollowStatus
          method: post
          cors: true  # Enable CORS for cross-origin requests
  bulkGetProfilesAndFollowing:
    handler: build/controllers/profiles/bulkGetProfilesAndFollowing.handler
    events:
      - http:
          path: /api/v1/profiles/bulkGetProfilesAndFollowing
          method: post   
          cors: true  # Enable CORS for cross-origin requests                                                                                                                               